{"version":3,"sources":["app/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAuCA,4CAA0B","file":"../../app/index.js","sourcesContent":["\nimport { ValidationError, ValidationSchema } from 'class-validator';\nimport { EggFile } from 'egg-multipart';\nimport { SchemaObject } from 'openapi3-ts';\nimport { Connection, EntityTarget, SelectQueryBuilder } from 'typeorm';\nimport { TypeOrmClass } from './pandora/typeorm';\nimport { JoinOption } from './pandora/typeorm/orm';\n\nexport declare function Repo<LeftEntity, RightEntity>(\n    left: EntityTarget<LeftEntity>, right: EntityTarget<RightEntity>,\n    config: JoinOption<LeftEntity, RightEntity>,\n    callback?: <P>(selection: SelectQueryBuilder<P>, e1: LeftEntity, e2: RightEntity) => SelectQueryBuilder<P>,\n): SelectQueryBuilder<LeftEntity | RightEntity>;\nexport declare function Repo<E>(Entity: TypeOrmClass<E>, dbName?: string): E;\n\ndeclare module 'egg' {\n    interface Context {\n        schema(): { [key: string]: SchemaObject; };\n        schema<T>(someClass: {\n            new(...args: any[]): T;\n        }): ValidationSchema;\n        vaildAOP<T>(someClass: {\n            new(...args: any[]): T;\n        }, data: any): Promise<ValidationError[]>;\n\n        param<T = any>(): T;\n        param<T = any>(name?: string): T;\n\n        post<T = any>(): T;\n        post<T = any>(name?: string): T;\n\n        file(): EggFile[];\n        file(name?: string): EggFile;\n\n        connection: Connection;\n        repo: typeof Repo;\n    }\n}\n\nexport * from './pandora';\n"]}