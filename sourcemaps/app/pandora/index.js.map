{"version":3,"sources":["app/pandora/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,uCAAmD;AAMnD,uCAAoC;AAEpC,2EAAwD;AAExD,4CAA0B;AAC1B,4CAA0B;AAC1B,2CAAyB;AACzB,4CAA0B;AAa1B,SAAgB,OAAO,CAAC,GAAqB,EAAE,UAA0B,EAAE;IACvE,OAAO,SAAS,OAAO,CAAC,MAAc,EAAE,YAA6B;QACjE,MAAM,MAAM,GAAoB,EAAE,CAAC;QACnC,IAAI,OAAO,CAAC,OAAO,EAAE;YAAE,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;SAAE;QAC9D,IAAI,OAAO,CAAC,OAAO,EAAE;YAAE,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SAAE;QAC1D,uCAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,YAAsB,CAAC,CAAC;QACnD,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACvC,CAAC,CAAA;AACL,CAAC;AARD,0BAQC;AAEY,QAAA,SAAS,GAAG,CAAC,GAAgB,EAAE,MAAqB,EAAE,EAAE;IACjE,iBAAO,CAAC,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,EAAE;QAAE,iBAAO,CAAC,GAAG,CAAC,CAAC;KAAE;AACnD,CAAC,CAAA","file":"../../../app/pandora/index.js","sourcesContent":["import { Application } from 'egg';\nimport { PandoraRouterOption } from './router/core';\nimport { swagger, SwaggerOption } from './swagger';\nimport {\n    Column, CreateDateColumn, DeleteDateColumn, ObjectIdColumn,\n    PrimaryColumn, UpdateDateColumn, VersionColumn, ViewColumn,\n    ColumnOptions,\n} from 'typeorm';\nimport { typeorm } from './typeorm';\nimport { DecoratorSchema } from 'class-validator-jsonschema/build/decorators';\nimport { JSONSchema } from 'class-validator-jsonschema';\n\nexport * from './swagger';\nexport * from './aopImpl';\nexport * from './router';\nexport * from './typeorm';\n\nexport interface PandoraOption {\n    router?: PandoraRouterOption;\n    swagger?: SwaggerOption;\n    typeorm?: boolean;\n}\n\nexport type PColumnDecorator = typeof Column | typeof CreateDateColumn | typeof DeleteDateColumn | typeof ObjectIdColumn |\n    typeof PrimaryColumn | typeof UpdateDateColumn | typeof VersionColumn | typeof ViewColumn;\n\nexport type PColumnOptions = ColumnOptions;\n\nexport function PColumn(Col: PColumnDecorator, options: PColumnOptions = {}): PropertyDecorator {\n    return function wrapper(target: object, prototypeKey: string | symbol) {\n        const schema: DecoratorSchema = {};\n        if (options.comment) { schema.description = options.comment; }\n        if (options.default) { schema.example = options.default; }\n        JSONSchema(schema)(target, prototypeKey as string);\n        Col(options)(target, prototypeKey);\n    }\n}\n\nexport const bootstrap = (app: Application, config: PandoraOption) => {\n    swagger(app, config.swagger);\n    if (config.typeorm !== false) { typeorm(app); }\n}\n"]}