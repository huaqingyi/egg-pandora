{"version":3,"sources":["app/pandora/aopImpl/aop.ts"],"names":[],"mappings":";;;AAAA,qDAA8E;AAC9E,2EAA0E;AAG1E,mCAA6B;AAc7B,MAAa,GAAG;IACZ,YACY,GAAgB;QAAhB,QAAG,GAAH,GAAG,CAAa;QAExB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,QAAQ,CAAC,GAAgB;QAC5B,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAMM,aAAa,CAAC,SAAe;QAChC,IAAI,CAAC,SAAS,EAAE;YAAE,OAAO,yDAA4B,EAAE,CAAC;SAAE;QAC1D,OAAQ,SAAiB,CAAC,MAAM,EAAE,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAI,SAExB,EAAE,IAAS;QACR,MAAM,IAAI,GAAQ,IAAI,SAAS,EAAE,CAAC;QAClC,YAAG,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,0BAAQ,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CACJ;AA5BD,kBA4BC","file":"../../../../app/pandora/aopImpl/aop.js","sourcesContent":["import { validate, ValidationError, ValidationSchema } from 'class-validator';\nimport { validationMetadatasToSchemas } from 'class-validator-jsonschema';\nimport { SchemaObject } from 'openapi3-ts';\nimport { Application } from 'egg';\nimport { map } from 'lodash';\n\ndeclare module 'egg' {\n    interface Context {\n        schema(): { [key: string]: SchemaObject; };\n        schema<T>(someClass: {\n            new(...args: any[]): T;\n        }): ValidationSchema;\n        vaildAOP<T>(someClass: {\n            new(...args: any[]): T;\n        }, data: any): Promise<ValidationError[]>;\n    }\n}\n\nexport class AOP {\n    constructor(\n        private app: Application,\n    ) {\n        this.buildAOP(this.app);\n    }\n\n    public buildAOP(app: Application) {\n        app.context.schema = this.classToSchema.bind(this);\n        app.context.vaildAOP = this.vaildAOP.bind(this);\n    }\n\n    public classToSchema(): { [key: string]: SchemaObject; };\n    public classToSchema<T>(someClass: {\n        new(...args: any[]): T;\n    }): ValidationSchema;\n    public classToSchema(someClass?: any) {\n        if (!someClass) { return validationMetadatasToSchemas(); }\n        return (someClass as any).schema();\n    }\n\n    public async vaildAOP<T>(someClass: {\n        new(...args: any[]): T;\n    }, data: any): Promise<ValidationError[]> {\n        const some: any = new someClass();\n        map(data, (o, i) => { some[i] = o; });\n        return validate(some);\n    }\n}\n"]}