{"version":3,"sources":["app/pandora/aopImpl/aop.ts"],"names":[],"mappings":";;;AAAA,qDAA4D;AAC5D,2EAA0E;AAC1E,mCAA6B;AAEhB,QAAA,GAAG,GAAG;IACf,MAAM,CAAU,SAAa;QACzB,IAAI,CAAC,SAAS,EAAE;YAAE,OAAO,yDAA4B,EAAE,CAAC;SAAE;QAC1D,OAAQ,SAAiB,CAAC,MAAM,EAAE,CAAC;IACvC,CAAC;IACD,KAAK,CAAC,QAAQ,CAAI,SAEjB,EAAE,IAAS;QACR,MAAM,IAAI,GAAQ,IAAI,SAAS,EAAE,CAAC;QAClC,YAAG,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,0BAAQ,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CACJ,CAAA","file":"../../../../app/pandora/aopImpl/aop.js","sourcesContent":["import { validate, ValidationError } from 'class-validator';\nimport { validationMetadatasToSchemas } from 'class-validator-jsonschema';\nimport { map } from 'lodash';\n\nexport const AOP = {\n    schema<T = any>(someClass?: T) {\n        if (!someClass) { return validationMetadatasToSchemas(); }\n        return (someClass as any).schema();\n    },\n    async vaildAOP<T>(someClass: {\n        new(...args: any[]): T;\n    }, data: any): Promise<ValidationError[]> {\n        const some: any = new someClass();\n        map(data, (o, i) => { some[i] = o; });\n        return validate(some);\n    }\n}\n"]}