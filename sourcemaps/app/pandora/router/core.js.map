{"version":3,"sources":["app/pandora/router/core.ts"],"names":[],"mappings":"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","file":"../../../../app/pandora/router/core.js","sourcesContent":["import { Application, Context, Controller } from 'egg';\nimport { map, isRegExp } from 'lodash';\nimport { PANDORACONTROLMIDLE, PANDORAROUTER, PANDORAROUTEREABLE, PANDORAROUTES, PANDORAACTIONMIDLE } from './preconst';\nimport { existsSync } from 'fs';\nimport Router from 'koa-router';\n\nexport interface PandoraRouterOption {\n    autoloader?: boolean;\n    enable?: boolean;\n}\n\nexport class PandoraRouter {\n    public routes: (new (...props: any) => Controller)[];\n\n    constructor() {\n        this.routes = [];\n    }\n\n    public async bootstrap(app: Application, config: PandoraRouterOption) {\n        config = {\n            autoloader: true,\n            ...config,\n        }\n        if (config.enable === false) { return app; }\n        return await Promise.all(map(this.routes, async control => {\n            const ismap = control[PANDORAROUTEREABLE];\n            if (ismap !== true && config.autoloader === false) { return control; };\n            const actions = control[PANDORAROUTES];\n            let prefixs = control[PANDORAROUTER];\n            const fullPath = control.prototype.fullPath.\n                split('\\\\').join('/').\n                replace(/[\\/]{2,9}/g, '/').\n                replace(/(\\.ts)|(\\.js)/g, '');\n\n            const controlName = fullPath.substring(fullPath.indexOf('controller/') + 'controller/'.length);\n            prefixs = prefixs || [fullPath.substring(fullPath.indexOf('controller/') + 'controller/'.length)];\n            // prefix = prefix.startsWith('/') ? prefix : '/' + prefix;\n            const logicPath = control.prototype.fullPath.split('controller/').join('logic/');\n            await Promise.all(map(actions, ({ config, name }) => Promise.all(map(config.methods, async method => {\n                const ciddles: Router.IMiddleware<any, any>[] = control[PANDORACONTROLMIDLE] || [];\n                const aiddles: Router.IMiddleware<any, any>[] = (control[PANDORAACTIONMIDLE] || {})[name] || [];\n                const middlewares = ciddles.concat(aiddles);\n                return Promise.all(map(prefixs, async prefix => {\n\n                    let path: RegExp | string = ``;\n                    if (isRegExp(prefix)) {\n                        // /prefix/.source + /config.path/.source\n                        if (isRegExp(config.path)) path = new RegExp(`${prefix.source + config.path.source}$`, 'gi');\n                        // /prefix/.source + (new RegExp(config.path)).source\n                        else path = new RegExp(`${prefix.source + (new RegExp(config.path)).source}$`, 'gi');\n                    } else {\n                        // (new RegExp('prefix')).source + config.path.source\n                        if (isRegExp(config.path)) path = new RegExp(`${(new RegExp(prefix)).source + config.path.source}$`, 'gi');\n                        // 'prefix/config.path'\n                        else {\n                            const paths = `${prefix}/${config.path}`.split('//').join('/').split('');\n                            const p = paths.pop() || '';\n                            if (p !== '/') { paths.push(p); }\n                            path = paths.join('');\n                        }\n                    }\n\n                    if (existsSync(logicPath)) {\n                        const LogicClass = (await import(logicPath)).default;\n                        const actions: any[] = [];\n\n                        if ((app as any).jwt && config.secret !== false) { actions.push((app as any).jwt); }\n                        actions.push(async (ctx: Context, next) => {\n                            const logics = (new LogicClass(ctx));\n                            if (logics[name]) {\n                                const valid = await logics[name].apply(logics, [ctx]);\n                                if (valid === false) return valid;\n                            }\n                            return await next();\n                        });\n                        actions.push(app.controller[controlName][name]);\n                        app.router[method.toLocaleLowerCase()](path, ...middlewares, ...actions);\n                    } else {\n                        const actions: Function[] = [];\n                        if ((app as any).jwt && config.secret !== false) { actions.push((app as any).jwt); }\n                        actions.push(app.controller[controlName][name]);\n                        app.router[method.toLocaleLowerCase()](path, ...middlewares, ...actions);\n                    }\n                    return app.router;\n                }));\n            }))));\n            return control;\n        }));\n    }\n}\n\nexport const pandorouter = new PandoraRouter();\n"]}