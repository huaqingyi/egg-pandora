{"version":3,"sources":["app/pandora/router/core.ts"],"names":[],"mappings":"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","file":"../../../../app/pandora/router/core.js","sourcesContent":["import { Application, Context, Controller } from 'egg';\nimport { map } from 'lodash';\nimport { PANDORAROUTER, PANDORAROUTEREABLE, PANDORAROUTES } from './preconst';\nimport { existsSync } from 'fs';\n\nexport interface PandoraRouterOption {\n    autoloader?: boolean;\n    enable?: boolean;\n}\n\nexport class PandoraRouter {\n    public routes: (new (...props: any) => Controller)[];\n\n    constructor() {\n        this.routes = [];\n    }\n\n    public async bootstrap(app: Application, config: PandoraRouterOption) {\n        config = {\n            autoloader: true,\n            ...config,\n        }\n        if (config.enable === false) { return app; }\n        return await Promise.all(map(this.routes, async control => {\n            const ismap = control[PANDORAROUTEREABLE];\n            if (ismap !== true && config.autoloader === false) { return control; };\n            const actions = control[PANDORAROUTES];\n            let prefix = control[PANDORAROUTER];\n            const fullPath = control.prototype.fullPath.\n                split('\\\\').join('/').\n                replace(/[\\/]{2,9}/g, '/').\n                replace(/(\\.ts)|(\\.js)/g, '');\n\n            const controlName = fullPath.substring(fullPath.indexOf('controller/') + 'controller/'.length);\n            prefix = prefix || fullPath.substring(fullPath.indexOf('controller/') + 'controller/'.length);\n            prefix = prefix.startsWith('/') ? prefix : '/' + prefix;\n            const logicPath = control.prototype.fullPath.split('controller/').join('logic/');\n\n            await Promise.all(map(actions, ({ config, name }) => Promise.all(map(config.methods, async method => {\n                const path = `${prefix}${config.path.startsWith('/') ? config.path : `/${config.path}`}`;\n\n                if (existsSync(logicPath)) {\n                    const actions = [async (ctx: Context, next) => {\n                        const LogicClass = (await import(logicPath)).default;\n                        const logics = (new LogicClass(ctx));\n                        try {\n                            if (logics[name]) {\n                                const valid = await logics[name].apply(logics, [ctx]);\n                                if (valid === false) return valid;\n                            }\n                        } catch (error) {\n                            await next();\n                            return ctx.throw(500, error.message);\n                        }\n                        return await next();\n                    }];\n                    if ((app as any).jwt && config.secret !== false) { actions.push((app as any).jwt); }\n                    actions.push(app.controller[controlName][name]);\n                    app.router[method.toLocaleLowerCase()](path, ...actions);\n                } else {\n                    const actions: Function[] = [];\n                    if ((app as any).jwt && config.secret !== false) { actions.push((app as any).jwt); }\n                    actions.push(app.controller[controlName][name]);\n                    app.router[method.toLocaleLowerCase()](path, ...actions);\n                }\n                return app.router;\n            }))));\n            return control;\n        }));\n    }\n}\n\nexport const pandorouter = new PandoraRouter();\n"]}