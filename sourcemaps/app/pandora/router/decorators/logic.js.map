{"version":3,"sources":["app/pandora/router/decorators/logic.ts"],"names":[],"mappings":";;;;;;AAAA,6BAA0C;AAC1C,sEAAwC;AAIxC,mCAA4C;AAiF5C,MAAa,KAAM,SAAQ,gBAAU;IAIjC,YAAY,GAAY;QACpB,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,SAAS,GAAG,IAAI,yBAAS,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,KAAuB;QACvC,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,YAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAChB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACd,IAAI,CAAC,CAAC,MAAM,EAAE;gBAAE,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAAE;YACxD,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,QAAQ,CAAC,KAAwB,EAAE,IAA0B;QAChE,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,gBAAO,CAAC,GAAG,CAAC,EAAE;YACd,OAAO,IAAI,CAAC;SACf;aAAM;YAAE,OAAO,GAAG,CAAC;SAAE;IAC1B,CAAC;CACJ;AAzBD,sBAyBC;AAEY,QAAA,WAAW,GAAG;IACvB,KAAK,CAAgB,IAAa;QAC9B,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IAC9B,CAAC;IACD,IAAI,CAAgB,IAAa;QAC7B,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC7B,CAAC;IACD,IAAI,CAAgB,IAAa;QAC7B,IAAI,IAAI,EAAE;YACN,OAAO,aAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IAC9B,CAAC;CACJ,CAAC","file":"../../../../../app/pandora/router/decorators/logic.js","sourcesContent":["import { Context, Controller } from 'egg';\nimport Validator from 'think-validator';\nimport payload from 'think-payload';\nimport { RequestMethod } from './controller';\nimport { ValidationSchema } from 'class-validator/types/validation-schema/ValidationSchema';\nimport { find, isEmpty, map } from 'lodash';\n\nexport interface PandoraLogicRule {\n    boolean?: true;\n    string?: true;\n    int?: true;\n    float?: true;\n    array?: true;\n    object?: true;\n    required?: true;\n    aliasName?: string;\n    method?: RequestMethod | RequestMethod[];\n    jsonSchema?: ValidationSchema | Function;\n    requiredIf?: string[];\n    requiredNotIf?: string[];\n    requiredWith?: string[];\n    requiredWithAll?: string[];\n    requiredWithOut?: string[];\n    requiredWithOutAll?: string[];\n    contains?: string;\n    equals?: string;\n    different?: string;\n    before?: string;\n    after?: string;\n    alpha?: string;\n    alphaDash?: string;\n    alphaNumeric?: string;\n    alphaNumericDash?: string;\n    ascii?: true;\n    base64?: true;\n    byteLength?: { min?: number; max?: number; } | number;\n    creditCard?: true;\n    currency?: true | any;\n    date?: true;\n    decimal?: true;\n    divisibleBy?: number;\n    email?: true;\n    fqdn?: true | any;\n    fullWidth?: true;\n    halfWidth?: true;\n    hexColor?: true;\n    hex?: true;\n    ip?: true;\n    ip4?: true;\n    ip6?: true;\n    isbn?: true;\n    isin?: true;\n    iso8601?: true;\n    issn?: true;\n    uuid?: true;\n    dataURI?: true;\n    md5?: true;\n    macAddress?: true;\n    variableWidth?: true;\n    in?: string[];\n    notIn?: string;\n    length?: { min?: number; max?: number; } | number;\n    lowercase?: true;\n    uppercase?: true;\n    mobile?: true | any;\n    mongoId?: true;\n    multibyte?: true;\n    url?: true;\n    order?: true;\n    field?: true;\n    image?: true;\n    startWith?: string;\n    endWith?: string;\n    regexp?: RegExp;\n    children?: PandoraLogicRule;\n    [x: string]: any;\n}\n\nexport interface PandoraLogicRules {\n    [x: string]: PandoraLogicRule;\n}\n\nexport interface PandoraLogicRuleMsg {\n    [x: string]: any;\n}\n\nexport class Logic extends Controller {\n\n    protected validator: any;\n\n    constructor(ctx: Context) {\n        super(ctx);\n        this.validator = new Validator(ctx);\n    }\n\n    private _rulesParse(rules: PandoraLogicRule) {\n        const nrules: any = {};\n        map(rules, (r, n) => {\n            nrules[n] = r;\n            if (r.method) { nrules[n].method = r.method.join(','); }\n            return r;\n        });\n        return nrules;\n    }\n\n    public validate(rules: PandoraLogicRules, msgs?: PandoraLogicRuleMsg) {\n        const ret = this.validator.validate(this._rulesParse(rules), msgs);\n        if (isEmpty(ret)) {\n            return true;\n        } else { return ret; }\n    }\n}\n\nexport const PandoraForm = {\n    param(this: Context, name?: string) {\n        if (name) {\n            return this.request.query[name];\n        }\n        return this.request.query;\n    },\n    post(this: Context, name?: string) {\n        if (name) {\n            return this.request.body[name];\n        }\n        return this.request.body;\n    },\n    file(this: Context, name?: string) {\n        if (name) {\n            return find(this.request.files, ({ filename }) => filename === name);\n        }\n        return this.request.files;\n    },\n};\n"]}