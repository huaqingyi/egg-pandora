{"version":3,"sources":["app/pandora/typeorm/context.ts"],"names":[],"mappings":";;;AAAA,qCAAwC;AACxC,+BAAsC;AACtC,mCAAkC;AAErB,QAAA,OAAO,GAAG;IACnB,IAAI,CAAgD,GAAG,KAAY;QAC/D,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,MAAM,IAAI,iBAAQ,CAAC,MAAM,CAAC,EAAE;YAC7B,MAAM,UAAU,GAAG,uBAAa,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC/D,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE;gBACzB,GAAG,CAAC,MAAW,EAAE,GAAW;oBACxB,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE;wBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;qBAAE;oBACxC,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9C,CAAC;gBACD,GAAG,CAAC,MAAW,EAAE,GAAW,EAAE,KAAU;oBACpC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBACpB,OAAO,IAAI,CAAC;gBAChB,CAAC;aACJ,CAAC,CAAC;SACN;QACD,OAAQ,UAAY,CAAC,GAAG,KAAK,CAAC,CAAC;IACnC,CAAC;CACJ,CAAC","file":"../../../../app/pandora/typeorm/context.js","sourcesContent":["import { getConnection } from 'typeorm';\nimport { TypeOrm, join } from './orm';\nimport { isString } from 'lodash';\n\nexport const TypeORM = {\n    repo<E extends (new (...props: any) => TypeOrm<E>)>(...props: any[]) {\n        const [Entity, dbName] = props;\n        if (!dbName || isString(dbName)) {\n            const repository = getConnection(dbName).getRepository(Entity);\n            return new Proxy(repository, {\n                get(target: any, key: string) {\n                    if (target[key]) { return target[key]; }\n                    return Entity.prototype[key].bind(target);\n                },\n                set(target: any, key: string, value: any) {\n                    target[key] = value;\n                    return true;\n                }\n            });\n        }\n        return (join as any)(...props);\n    },\n};\n"]}