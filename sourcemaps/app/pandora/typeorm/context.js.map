{"version":3,"sources":["app/pandora/typeorm/context.ts"],"names":[],"mappings":";;;AAAA,qCAAwC;AAG3B,QAAA,OAAO,GAAG;IACnB,IAAI,CACA,MAAS,EAAE,MAAe;QAE1B,MAAM,UAAU,GAAG,uBAAa,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/D,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE;YACzB,GAAG,CAAC,MAAW,EAAE,GAAW;gBACxB,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE;oBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;iBAAE;gBACxC,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,CAAC;YACD,GAAG,CAAC,MAAW,EAAE,GAAW,EAAE,KAAU;gBACpC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACpB,OAAO,IAAI,CAAC;YAChB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;CACJ,CAAC","file":"../../../../app/pandora/typeorm/context.js","sourcesContent":["import { getConnection } from 'typeorm';\nimport { TypeOrm } from './orm';\n\nexport const TypeORM = {\n    repo<E extends (new (...props: any) => TypeOrm<E>)>(\n        Entity: E, dbName?: string,\n    ) {\n        const repository = getConnection(dbName).getRepository(Entity);\n        return new Proxy(repository, {\n            get(target: any, key: string) {\n                if (target[key]) { return target[key]; }\n                return Entity.prototype[key].bind(target);\n            },\n            set(target: any, key: string, value: any) {\n                target[key] = value;\n                return true;\n            }\n        });\n    },\n};\n"]}