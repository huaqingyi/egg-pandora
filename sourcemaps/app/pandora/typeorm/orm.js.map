{"version":3,"sources":["app/pandora/typeorm/orm.ts"],"names":[],"mappings":"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","file":"../../../../app/pandora/typeorm/orm.js","sourcesContent":["import { Repository, EntityTarget, getManager, SelectQueryBuilder } from 'typeorm';\nimport { map, isArray, isObject } from 'lodash';\n\nexport declare type TypeOrmClass<E> = {\n    new(...args: any[]): E & TypeOrm<E>;\n};\n\nexport class TypeOrm<T> extends Repository<T> {\n\n}\n\nexport function uniqueId(length: number = 6) {\n    const data = [\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n        'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\n        'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\n        'y', 'z'\n    ];\n    let nums = '';\n    for (let i = 0; i < length; i++) {\n        const r = parseInt(String(Math.random() * 51));\n        nums += data[r];\n    }\n    return nums;\n}\n\nexport enum JoinType {\n    LEFT = 'leftJoinAndSelect',\n    RIGHT = 'rightJoinAndSelect',\n    INNER = 'innerJoinAndSelect',\n}\n\nexport type JoinOnCallback<E1, E2> = [(target: E1) => any, (target: E2) => any];\n\nexport interface JoinField {\n    array?: true;\n    field?: string;\n}\n\nexport interface JoinOption<E1, E2> {\n    type?: JoinType;\n    on: Array<JoinOnCallback<E1, E2>> | JoinOnCallback<E1, E2>;\n    fields: (e1: E1, e2: E2) => { [x: string]: string | JoinField; };\n    groupBy: (e1: E1, e2: E2) => any[],\n}\n\nexport function join<LeftEntity, RightEntity>(\n    left: EntityTarget<LeftEntity>, right: EntityTarget<RightEntity>,\n    config: JoinOption<LeftEntity, RightEntity>,\n    callback?: <P>(selection: SelectQueryBuilder<P>, e1: LeftEntity, e2: RightEntity) => SelectQueryBuilder<P>,\n) {\n\n    const lger = getManager().getRepository(left);\n    const rger = getManager().getRepository(right);\n    const ltn = uniqueId(6);\n    const rtn = uniqueId(6);\n\n    if (config.type) config.type = JoinType.LEFT;\n\n    const lcol: any = {};\n    const rcol: any = {};\n    map(lger.metadata.columns, ({ databaseName, propertyName }) => lcol[propertyName] = `${ltn}.${databaseName}`);\n    map(rger.metadata.columns, ({ databaseName, propertyName }) => rcol[propertyName] = `${rtn}.${databaseName}`);\n    let ons: Array<JoinOnCallback<LeftEntity, RightEntity>> = [];\n    if (!isArray(config.on[0])) {\n        ons.push(config.on as JoinOnCallback<LeftEntity, RightEntity>);\n    } else {\n        ons = config.on as Array<JoinOnCallback<LeftEntity, RightEntity>>;\n    }\n    const on = map(ons, ([l, r]: Function[]) => {\n        return `${l(lcol)} = ${r(rcol)}`;\n    }).join(',');\n    let builder = lger.createQueryBuilder(ltn).leftJoinAndSelect(\n        right as any, rtn, on\n    ).select(map(config.fields(lcol, rcol), (o, i) => {\n        if (isObject(o)) {\n            if (o.array === true) {\n                return `GROUP_CONCAT(${i}) as ${o.field}`;\n            }\n            return `${i} as ${o.field}`;\n        }\n        return `${i} as ${o}`;\n    }).join(','));\n    const groupBy = config.groupBy(lcol, rcol);\n    map(groupBy, by => builder = builder.groupBy(by));\n    if (callback) builder = callback(builder, lcol, rcol);\n    return builder;\n}\n"]}