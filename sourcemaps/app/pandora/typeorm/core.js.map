{"version":3,"sources":["app/pandora/typeorm/core.ts"],"names":[],"mappings":";;;AACA,qCAA+F;AAC/F,mCAAmC;AACnC,mCAAsC;AAEtC,MAAa,IAAI;IAOb,YACc,GAAgB;QAAhB,QAAG,GAAH,GAAG,CAAa;QAE1B,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;IAC9B,CAAC;IATD,IAAc,WAAW;QACrB,OAAO,OAAO,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,UAAU,CAAC;IAC3D,CAAC;IASM,YAAY,CAAC,MAAyB;QACzC,IAAI,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO,MAAM,CAAC;SAAE;QACxC,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QACvD,YAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;YACd,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,SAAS;QAClB,sBAAY,CAAC,kBAAS,CAAC,CAAC;QAExB,IAAI,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,YAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,GAAG,2BAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChE;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,GAAG,0BAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC;IACvC,CAAC;CACJ;AAnCD,oBAmCC","file":"../../../../app/pandora/typeorm/core.js","sourcesContent":["import { Application } from 'egg';\nimport { ConnectionOptions, createConnection, createConnections, useContainer } from 'typeorm';\nimport { Container } from 'typedi';\nimport { isArray, map } from 'lodash';\n\nexport class Core {\n    protected config: ConnectionOptions | ConnectionOptions[];\n    protected env: any;\n    protected get hasTsLoader() {\n        return typeof require.extensions['.ts'] === 'function';\n    }\n\n    constructor(\n        protected app: Application,\n    ) {\n        this.config = app.config.typeorm;\n        this.env = app.config.env;\n    }\n\n    public handleConfig(config: ConnectionOptions) {\n        if (this.hasTsLoader) { return config; }\n        const keys = ['entities', 'migrations', 'subscribers'];\n        map(keys, (key) => {\n            config[key] = config[key].map(item => item.replace(/\\.ts$/, '.js'));\n        });\n        return config;\n    }\n\n    public async connectDB() {\n        useContainer(Container);\n\n        if (isArray(this.config) && this.config) {\n            this.config = map(this.config, conf => this.handleConfig(conf));\n            this.app.context.connection = createConnections(this.config);\n        } else {\n            this.config = this.handleConfig(this.config);\n            this.app.context.connection = createConnection(this.config);\n        }\n        return this.app.context.connection;\n    }\n}\n"]}