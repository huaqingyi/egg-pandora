{"version":3,"sources":["app/pandora/typeorm/core.ts"],"names":[],"mappings":"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","file":"../../../../app/pandora/typeorm/core.js","sourcesContent":["import { join, sep } from 'path';\nimport { find } from 'fs-jetpack';\nimport { Application } from 'egg';\nimport {\n    createConnection,\n    getRepository,\n    Connection,\n    useContainer,\n} from 'typeorm';\nimport { Container } from 'typedi';\n\nimport { watch } from 'chokidar';\nimport { format } from 'prettier';\nimport { ensureDirSync, existsSync, writeFileSync } from 'fs-extra';\n\nconst hasTsLoader = typeof require.extensions['.ts'] === 'function';\n\nexport function formatCode(text: string) {\n    return format(text, {\n        semi: false,\n        tabWidth: 2,\n        singleQuote: true,\n        parser: 'typescript',\n        trailingComma: 'all',\n    });\n}\n\nexport function handleConfig(config: any, _env: string) {\n    if (hasTsLoader) {\n        return config;\n    }\n    const keys = ['entities', 'migrations', 'subscribers'];\n    for (const key of keys) {\n        if (config[key]) {\n            const newValue = config[key].map((item: string) =>\n                item.replace(/\\.ts$/, '.js'),\n            );\n            config[key] = newValue;\n        }\n    }\n    return config;\n}\n\nexport async function connectDB(app: Application) {\n    const config = handleConfig(app.config.typeorm, app.config.env);\n    useContainer(Container);\n\n    const connection = await createConnection(config);\n    app.context.connection = connection;\n}\n\nexport function capitalizeFirstLetter(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function getModelName(file: string) {\n    const filename = file.split(sep).pop() || '';\n    const name = capitalizeFirstLetter(filename.replace(/\\.ts$|\\.js$/g, ''));\n    return name;\n}\n\nexport function writeTyping(path: string, text: string) {\n    writeFileSync(path, formatCode(text), { encoding: 'utf8' });\n}\n\nexport function getTypingText(\n    importText: string,\n    repoText: string,\n    entityText: string,\n) {\n    const tpl = `\nimport 'egg'\nimport { Repository, Connection } from 'typeorm'\n${importText}\ndeclare module 'egg' {\n  interface Context {\n    connection: Connection\n    entity: {\n      ${entityText}\n    }\n    repo: {\n      ${repoText}\n    }\n  }\n}\n`;\n    return tpl;\n}\n\nexport function formatPaths(files: string[]) {\n    return files.map(file => {\n        const name = getModelName(file);\n        file = file.split(sep).join('/');\n        const importPath = `../${file}`.replace(/\\.ts$|\\.js$/g, '');\n        return {\n            name,\n            importPath,\n        };\n    });\n}\n\nexport function watchEntity(app: Application) {\n    const { baseDir } = app;\n    const entityDir = join(baseDir, 'app', 'entity');\n    const typingsDir = join(baseDir, 'typings');\n\n    if (!existsSync(entityDir)) { return; }\n\n    ensureDirSync(typingsDir)\n    watch(entityDir).on('all', (eventType: string) => {\n        if (['add', 'change'].includes(eventType)) {\n            createTyingFile(app);\n        }\n\n        if (['unlink'].includes(eventType)) {\n            createTyingFile(app);\n        }\n    })\n}\n\nexport function createTyingFile(app: Application) {\n    const { baseDir } = app;\n    const entityDir = join(baseDir, 'app', 'entity');\n    const files = find(entityDir, { matching: '*.ts' });\n    const typingPath = join(baseDir, 'typings', 'typeorm.d.ts');\n    const pathArr = formatPaths(files);\n    const importText = pathArr\n        .map(i => `import { ${i.name} } from '${i.importPath}'`)\n        .join('\\n');\n    // const repoText = pathArr\n    //     .map(i => `${i.name}: Repository<${i.name}>`)\n    //     .join('\\n')\n    const repoText = pathArr\n        .map(i => `${i.name}: ${i.name}`)\n        .join('\\n');\n\n    // TODO\n    const entityText = pathArr.map(i => `${i.name}: any`).join('\\n');\n    const text = getTypingText(importText, repoText, entityText);\n    writeTyping(typingPath, text);\n}\n\nexport function getEntityFromPath(app: Application, entityPath: string) {\n    const connection: Connection = app.context.connection;\n    const fileModule = require(entityPath);\n    const entities = Object.keys(fileModule).reduce(\n        (result, cur) => {\n            try {\n                // TODO: å¤ª hack\n                connection.getMetadata(fileModule[cur]);\n                if (!result.includes(fileModule[cur])) {\n                    return [...result, fileModule[cur]];\n                } else {\n                    return result;\n                }\n            } catch {\n                //\n            }\n\n            return result;\n        },\n        [] as any[],\n    );\n\n    if (!entities.length) {\n        throw new Error(`${entityPath} æ ¼å¼ä¸æ­£ç¡®ï¼ä¸å­å¨ @entity`);\n    }\n\n    return entities[0];\n}\n\nexport async function loadEntityAndModel(app: Application) {\n    const { baseDir } = app;\n    const entityDir = join(baseDir, 'app', 'entity');\n\n    if (!existsSync(entityDir)) { return; }\n\n    const matching = hasTsLoader ? '*.ts' : '*.js';\n\n    const files = find(entityDir, { matching });\n    app.context.repo = {};\n    app.context.entity = {};\n\n    try {\n        for (const file of files) {\n            const entityPath = join(baseDir, file);\n            const entity: any = getEntityFromPath(app, entityPath);\n            const name = getModelName(file);\n            const repo = getRepository(entity);\n            app.context.repo[name] = new Proxy(repo, {\n                get(target: any, key: string) {\n                    if (target[key]) { return target[key]; }\n                    return entity.prototype[key].bind(target);\n                },\n                set(target: any, key: string, value: any) {\n                    target[key] = value;\n                    return true;\n                }\n            });\n            app.context.entity[name] = entity;\n        }\n    } catch (e) {\n        app.logger.error(e);\n    }\n}\n"]}